import time
import logging
import os
from Binance_bot_trade.config import botConfig
from Binance_bot_trade.actionBot import strategyChoose, action_spot, action_futures
from Binance_bot_trade.analysis import update_price, check_trade_history_spot, check_trade_history_future
from Binance_bot_trade.utils import logger


def check_risk_management():
    """ Ki·ªÉm tra s·ªë l·∫ßn thua li√™n ti·∫øp & l·ªó trong ng√†y tr√™n c·∫£ Spot & Futures. N·∫øu v∆∞·ª£t ng∆∞·ª°ng s·∫Ω d·ª´ng bot. """
    
    # L·∫•y s·ªë d∆∞ USDT hi·ªán t·∫°i tr√™n Spot & Futures
    spot_balance = action_spot.get_spot_balance("USDT")
    futures_balance = action_futures.get_futures_balance("USDT")
    
    initial_balance = botConfig.START_BALANCE  # V·ªën kh·ªüi ƒëi·ªÉm

    # T√≠nh % l·ªó trong ng√†y
    spot_loss = ((initial_balance - spot_balance) / initial_balance) * 100 if spot_balance else 0
    futures_loss = ((initial_balance - futures_balance) / initial_balance) * 100 if futures_balance else 0
    total_loss = spot_loss + futures_loss  # T·ªïng % l·ªó

    # 1Ô∏è‚É£ Ki·ªÉm tra n·∫øu t·ªïng l·ªó trong ng√†y v∆∞·ª£t `DAILY_MAX_LOSS`
    if total_loss >= botConfig.DAILY_MAX_LOSS:
        logging.critical(f"‚ùå Bot ƒë√£ l·ªó {total_loss:.2f}% trong ng√†y! D·ª™NG giao d·ªãch ngay!")
        return False  # Ng·ª´ng giao d·ªãch

    # # 2Ô∏è‚É£ Ki·ªÉm tra s·ªë l·∫ßn thua li√™n ti·∫øp
    # if logger.get_consecutive_losses() >= botConfig.MAX_CONSECUTIVE_LOSSES:
    #     logging.warning(f"‚ö†Ô∏è Bot ƒë√£ thua {botConfig.MAX_CONSECUTIVE_LOSSES} l·ªánh li√™n ti·∫øp! T·∫†M D·ª™NG giao d·ªãch 1 gi·ªù!")
    #     time.sleep(3600)  # T·∫°m d·ª´ng 1 gi·ªù
    #     logger.reset_consecutive_losses()  # Reset l·∫°i s·ªë l·∫ßn thua li√™n ti·∫øp

    return True  # Cho ph√©p ti·∫øp t·ª•c giao d·ªãch


def main():
    logging.info("üöÄ B·∫ÆT ƒê·∫¶U CH·∫†Y BOT TRADING...\n")
    
    # üî• B∆∞·ªõc 1: Load c·∫•u h√¨nh bot
    logging.info("üîπ ƒêang t·∫£i c·∫•u h√¨nh t·ª´ botConfig.py...")
    trade_mode = botConfig.TRADE_MODE
    test_mode = botConfig.TEST_MODE
    logging.info(f"üîπ Trade Mode: {trade_mode} | Test Mode: {test_mode}")

    while True:
        try:
            logging.info("\nüîç Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch...\n")
            
            # üî• B∆∞·ªõc 2: C·∫≠p nh·∫≠t gi√° th·ªã tr∆∞·ªùng
            market_prices = update_price.update_prices()
            if not market_prices or not market_prices.get("spot") or not market_prices.get("futures"):
                logging.warning("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu gi√°, b·ªè qua v√≤ng l·∫∑p n√†y!")
                continue

            logging.info(f"üîπ Gi√° Spot: {market_prices['spot'].get('spot_price', 'N/A')} | Gi√° Futures: {market_prices['futures'].get('futures_price', 'N/A')}")

            # üî• B∆∞·ªõc 3: Ch·∫°y chi·∫øn l∆∞·ª£c giao d·ªãch
            logging.info("\nüéØ ƒêang ph√¢n t√≠ch chi·∫øn l∆∞·ª£c giao d·ªãch...")
            # chosen_strategies = strategyChoose.choose_strategies(trade_mode)
            chosen_strategies = {
                                    "SPOT": strategyChoose.choose_strategies("SPOT"),
                                    "FUTURES": strategyChoose.choose_strategies("FUTURES")
                                }
            chosen_strategies_futures = chosen_strategies.get("FUTURES")
      
            if not chosen_strategies:
                logging.warning("‚ö†Ô∏è Kh√¥ng c√≥ chi·∫øn l∆∞·ª£c ph√π h·ª£p, b·ªè qua v√≤ng l·∫∑p n√†y!")
                continue
            

            # üî• B∆∞·ªõc 4: Ki·ªÉm tra l·ªãch s·ª≠ giao d·ªãch
            logging.info("\nüìä Ki·ªÉm tra l·ªãch s·ª≠ giao d·ªãch...")
            check_trade_history_spot.check_trade_history_spot(botConfig.TRADE_PAIRS["SPOT"][0]) 
            check_trade_history_future.check_trade_history_futures(botConfig.TRADE_PAIRS["FUTURES"][0])

            # üî• B∆∞·ªõc 5: Qu·∫£n l√Ω l·ªánh Spot
            if trade_mode in ["SPOT", "BOTH"] and chosen_strategies.get("SPOT"):
                logging.info("\n‚ö° X·ª≠ l√Ω giao d·ªãch Spot...")

                symbol = botConfig.TRADE_PAIRS["SPOT"][0]
                usdt_balance = action_spot.get_spot_balance("USDT")
                coin_balance = action_spot.get_spot_balance(symbol.replace("USDT", ""))
                open_orders = action_spot.get_open_order_count(symbol)  # Ki·ªÉm tra s·ªë l·ªánh ƒëang m·ªü

                # üî• Ki·ªÉm tra Risk Management tr∆∞·ªõc khi giao d·ªãch
                if not check_risk_management():
                    continue

                # üî• Ki·ªÉm tra s·ªë l∆∞·ª£ng l·ªánh ƒëang m·ªü
                
              
                # L·∫•y danh s√°ch c√°c l·ªánh m·ªü t·ª´ get_active_trades()
                previous_trades = action_spot.get_active_trades()

                if previous_trades:  # N·∫øu c√≥ l·ªánh m·ªü
                    for trade in previous_trades:
                        try:
                            symbol = trade["symbol"]
                            order_id = trade["orderId"]
                            buy_price = float(trade["price"])  # Gi√° mua c·ªßa l·ªánh
                            quantity = float(trade["quantity"])  # S·ªë l∆∞·ª£ng coin

                            # L·∫•y gi√° hi·ªán t·∫°i c·ªßa Spot
                            current_price = market_prices["spot"]["spot_price"]
                            price_change = (current_price - buy_price) / buy_price * 100

                            TP_THRESHOLD = botConfig.TAKE_PROFIT_PERCENT
                            SL_THRESHOLD = botConfig.STOP_LOSS_PERCENT

                            if price_change >= TP_THRESHOLD:
                                logging.info(f"‚úÖ Gi√° tƒÉng {price_change:.2f}% ‚Üí ƒê·∫∑t Limit Sell ƒë·ªÉ ch·ªët l·ªùi!")
                                limit_price = current_price * (1 + botConfig.LIMIT_ORDER_PRICE_OFFSET / 100)
                                action_spot.place_limit_sell_spot(symbol, limit_price, quantity)

                            elif price_change <= -SL_THRESHOLD:
                                logging.warning(f"‚ö†Ô∏è Gi√° gi·∫£m {price_change:.2f}% ‚Üí C·∫Øt l·ªó!")
                                action_spot.place_market_sell_spot(symbol, quantity)

                        except Exception as e:
                            logging.error(f"‚ùå L·ªói khi x·ª≠ l√Ω l·ªánh {trade['orderId']}: {e}")


                else:
                    # N·∫øu kh√¥ng c√≥ l·ªánh m·ªü, ƒë·∫∑t l·ªánh theo chi·∫øn l∆∞·ª£c
                    if open_orders >= botConfig.MAX_CONCURRENT_TRADES:
                        logging.warning(f"‚ö†Ô∏è SPOT ƒê√£ c√≥ {open_orders} l·ªánh m·ªü! ƒê·∫°t gi·ªõi h·∫°n {botConfig.MAX_CONCURRENT_TRADES}, kh√¥ng ƒë·∫∑t l·ªánh m·ªõi.")
                    else:
                        current_price = market_prices["spot"]["spot_price"]

                        if "BREAKOUT" in chosen_strategies["SPOT"] and usdt_balance > botConfig.MIN_TRADE_AMOUNT:
                            logging.info("üöÄ K√≠ch ho·∫°t chi·∫øn l∆∞·ª£c BREAKOUT ‚Üí ƒê·∫∑t Limit Buy!")
                            limit_price = current_price * (1 - botConfig.LIMIT_ORDER_PRICE_OFFSET / 100)
                            action_spot.place_limit_buy_spot(symbol, limit_price, botConfig.TRADE_AMOUNT)

                        elif "MEAN_REVERSION" in chosen_strategies["SPOT"] and coin_balance > 0:
                            logging.info("üìâ K√≠ch ho·∫°t chi·∫øn l∆∞·ª£c MEAN_REVERSION ‚Üí ƒê·∫∑t Limit Sell!")
                            limit_price = current_price * (1 + botConfig.LIMIT_ORDER_PRICE_OFFSET / 100)
                            action_spot.place_limit_sell_spot(symbol, limit_price, botConfig.TRADE_AMOUNT)

                        elif "ICHIMOKU" in chosen_strategies["SPOT"]:
                            ichimoku_signal = update_price.get_ichimoku_signal(symbol)
                            if ichimoku_signal == "BUY" and usdt_balance > botConfig.MIN_TRADE_AMOUNT:
                                logging.info("üå•Ô∏è K√≠ch ho·∫°t chi·∫øn l∆∞·ª£c ICHIMOKU ‚Üí ƒê·∫∑t Market Buy!")
                                action_spot.place_market_buy_spot(symbol, botConfig.TRADE_AMOUNT)
                            elif ichimoku_signal == "SELL" and coin_balance > 0:
                                logging.info("üå•Ô∏è K√≠ch ho·∫°t chi·∫øn l∆∞·ª£c ICHIMOKU ‚Üí ƒê·∫∑t Market Sell!")
                                action_spot.place_market_sell_spot(symbol, botConfig.TRADE_AMOUNT)

                        elif "GOLDEN_CROSS" in chosen_strategies["SPOT"]:
                            golden_cross_signal = update_price.get_golden_cross_signal(symbol)
                            if golden_cross_signal == "BUY" and usdt_balance > botConfig.MIN_TRADE_AMOUNT:
                                logging.info("üèÜ K√≠ch ho·∫°t chi·∫øn l∆∞·ª£c GOLDEN CROSS ‚Üí ƒê·∫∑t Market Buy!")
                                action_spot.place_market_buy_spot(symbol, botConfig.TRADE_AMOUNT)
                            elif golden_cross_signal == "SELL" and coin_balance > 0:
                                logging.info("üèÜ K√≠ch ho·∫°t chi·∫øn l∆∞·ª£c GOLDEN CROSS ‚Üí ƒê·∫∑t Market Sell!")
                                action_spot.place_market_sell_spot(symbol, botConfig.TRADE_AMOUNT)

                        elif "GRID_TRADING" in chosen_strategies["SPOT"]:
                            grid_buy_price = current_price * (1 - botConfig.LIMIT_ORDER_PRICE_OFFSET / 100)
                            grid_sell_price = current_price * (1 + botConfig.LIMIT_ORDER_PRICE_OFFSET / 100)
                            logging.info(f"üìä K√≠ch ho·∫°t chi·∫øn l∆∞·ª£c GRID TRADING ‚Üí ƒê·∫∑t l·ªánh Buy {grid_buy_price:.2f} & Sell {grid_sell_price:.2f}!")
                            action_spot.place_limit_buy_spot(symbol, grid_buy_price, botConfig.TRADE_AMOUNT)
                            action_spot.place_limit_sell_spot(symbol, grid_sell_price, botConfig.TRADE_AMOUNT)

                        elif "RSI_MACD" in chosen_strategies["SPOT"]:
                            rsi_value = update_price.get_rsi_value(symbol)
                            macd_info = update_price.get_macd_value(symbol)
                            macd_value = macd_info.get("macd", None)
                            signal_value = macd_info.get("signal", None)

                            if rsi_value < 30 and macd_value > signal_value and usdt_balance > botConfig.MIN_TRADE_AMOUNT:
                                logging.info(f"üìä RSI MACD t√≠n hi·ªáu MUA ‚Üí ƒê·∫∑t Market Buy!")
                                action_spot.place_market_buy_spot(symbol, botConfig.TRADE_AMOUNT)
                            elif rsi_value > 70 and macd_value < signal_value and coin_balance > 0:
                                logging.info(f"üìä RSI MACD t√≠n hi·ªáu B√ÅN ‚Üí ƒê·∫∑t Market Sell!")
                                action_spot.place_market_sell_spot(symbol, botConfig.TRADE_AMOUNT)

                        elif "BOLLINGER_BANDS" in chosen_strategies["SPOT"]:
                            bollinger_signal = update_price.get_bollinger_signal(symbol)
                            if bollinger_signal == "BUY" and usdt_balance > botConfig.MIN_TRADE_AMOUNT:
                                logging.info("üìè K√≠ch ho·∫°t chi·∫øn l∆∞·ª£c BOLLINGER BANDS ‚Üí ƒê·∫∑t Market Buy!")
                                action_spot.place_market_buy_spot(symbol, botConfig.TRADE_AMOUNT)
                            elif bollinger_signal == "SELL" and coin_balance > 0:
                                logging.info("üìè K√≠ch ho·∫°t chi·∫øn l∆∞·ª£c BOLLINGER BANDS ‚Üí ƒê·∫∑t Market Sell!")
                                action_spot.place_market_sell_spot(symbol, botConfig.TRADE_AMOUNT)

                        else:
                            logging.info("‚ö†Ô∏è Kh√¥ng c√≥ chi·∫øn l∆∞·ª£c giao d·ªãch Spot ph√π h·ª£p!")


            # üî• B∆∞·ªõc 6: Qu·∫£n l√Ω l·ªánh Futures
            # 
            if trade_mode in ["FUTURES", "BOTH"] and chosen_strategies.get("FUTURES"):
                logging.info("\n‚ö° X·ª≠ l√Ω giao d·ªãch Futures...")

                symbol = botConfig.TRADE_PAIRS["FUTURES"][0]  # Ch·ªçn c·∫∑p giao d·ªãch m·∫∑c ƒë·ªãnh
                usdt_balance = action_futures.get_futures_balance("USDT")  # Ki·ªÉm tra s·ªë d∆∞ USDT
                leverage = botConfig.TRADE_LEVERAGE  # L·∫•y ƒë√≤n b·∫©y t·ª´ botConfig
                open_orders = action_futures.get_open_order_count()  # Ki·ªÉm tra s·ªë l·ªánh ƒëang m·ªü

                # üî• Ki·ªÉm tra Risk Management tr∆∞·ªõc khi giao d·ªãch
                if not check_risk_management():
                    continue

                # üî• Ki·ªÉm tra s·ªë l∆∞·ª£ng l·ªánh ƒëang m·ªü
                if open_orders >= botConfig.MAX_CONCURRENT_TRADES:
                    logging.warning(f"‚ö†Ô∏è ƒê√£ c√≥ {open_orders} l·ªánh m·ªü! ƒê·∫°t gi·ªõi h·∫°n {botConfig.MAX_CONCURRENT_TRADES}, kh√¥ng ƒë·∫∑t l·ªánh m·ªõi.")
                    continue

                if usdt_balance < botConfig.MIN_TRADE_AMOUNT:
                    logging.warning("‚ö†Ô∏è Kh√¥ng ƒë·ªß USDT ƒë·ªÉ giao d·ªãch Futures!")
                else:
                    # L·∫•y gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i
                    futures_price_info = update_price.get_futures_price(symbol)
                    futures_price = futures_price_info["futures_price"]

                    if futures_price is None:
                        logging.warning(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° {symbol}, b·ªè qua giao d·ªãch!")
                    else:
                         
                        # Ki·ªÉm tra qu·∫£n l√Ω r·ªßi ro (ch·ªâ ti·∫øp t·ª•c n·∫øu ch∆∞a l·ªó qu√° m·ª©c)
                        if not check_risk_management():
                            logging.critical("‚ùå D·ª´ng giao d·ªãch Futures do vi ph·∫°m gi·ªõi h·∫°n r·ªßi ro!")
                        else:
                            (
                                    ohlcv_data, rsi_data, macd_data, atr_data, 
                                    ichimoku_data, golden_cross_data, vwap_data, 
                                    pivot_data, volume_profile_data, bollinger_bands, 
                                    mean_reversion_signal
                                ) = strategyChoose.tech_data_spot("FUTURES")
                            # **üî• ƒê·∫∑t l·ªánh t√πy theo chi·∫øn l∆∞·ª£c ƒë√£ ch·ªçn**
                            if "BREAKOUT" in chosen_strategies_futures["FUTURES"]:
                                limit_price = futures_price * (1 + botConfig.LIMIT_ORDER_PRICE_OFFSET / 100)
                                logging.info(f"üöÄ BREAKOUT ‚Üí ƒê·∫∑t l·ªánh LONG Limit t·∫°i {limit_price:.2f} USDT (Leverage {leverage}x)")
                                action_futures.place_limit_long(symbol, limit_price, botConfig.TRADE_AMOUNT)

                            elif "SCALPING" in chosen_strategies_futures["FUTURES"]:
                                limit_price = futures_price * (1 + botConfig.LIMIT_ORDER_PRICE_OFFSET / 100)
                                logging.info(f"‚ö° SCALPING ‚Üí ƒê·∫∑t l·ªánh LONG Limit t·∫°i {limit_price:.2f} USDT (Leverage {leverage}x)")
                                action_futures.place_limit_long(symbol, limit_price, botConfig.TRADE_AMOUNT)

                            elif "GRID_TRADING" in chosen_strategies_futures.get("FUTURES", []):
                                logging.info(f"üìä GRID TRADING ‚Üí K√≠ch ho·∫°t l∆∞·ªõi giao d·ªãch cho {symbol}")

                                current_price = futures_price  # Gi√° hi·ªán t·∫°i tr√™n Futures
                                grid_levels = botConfig.GRID_LEVELS  # S·ªë l∆∞·ª£ng m·ª©c gi√° trong l∆∞·ªõi
                                grid_spacing = botConfig.GRID_SPACING_PERCENT / 100  # Kho·∫£ng c√°ch gi·ªØa c√°c m·ª©c

                                for i in range(grid_levels):
                                    # **T·∫°o c√°c m·ª©c gi√° LONG (BUY)**
                                    limit_buy_price = current_price * (1 - (i + 1) * grid_spacing)
                                    logging.info(f"üìâ ƒê·∫∑t l·ªánh LONG Limit t·∫°i {limit_buy_price:.2f} USDT")
                                    action_futures.place_limit_long(symbol, limit_buy_price, botConfig.TRADE_AMOUNT)

                                    # **T·∫°o c√°c m·ª©c gi√° SHORT (SELL)**
                                    limit_sell_price = current_price * (1 + (i + 1) * grid_spacing)
                                    logging.info(f"üìà ƒê·∫∑t l·ªánh SHORT Limit t·∫°i {limit_sell_price:.2f} USDT")
                                    action_futures.place_limit_short(symbol, limit_sell_price, botConfig.TRADE_AMOUNT)

                            elif "MARKET_MAKING" in chosen_strategies_futures.get("FUTURES", []):
                                logging.info(f"üè¶ MARKET MAKING ‚Üí Cung c·∫•p thanh kho·∫£n cho {symbol}")
                                
                                current_price = futures_price  # Gi√° hi·ªán t·∫°i tr√™n Futures
                                limit_buy_price = current_price * (1 - botConfig.LIMIT_ORDER_PRICE_OFFSET / 100)  # Mua th·∫•p h∆°n
                                limit_sell_price = current_price * (1 + botConfig.LIMIT_ORDER_PRICE_OFFSET / 100)  # B√°n cao h∆°n

                                logging.info(f"üìâ ƒê·∫∑t l·ªánh LONG Limit t·∫°i {limit_buy_price:.2f} USDT")
                                action_futures.place_limit_long(symbol, limit_buy_price, botConfig.TRADE_AMOUNT)

                                logging.info(f"üìà ƒê·∫∑t l·ªánh SHORT Limit t·∫°i {limit_sell_price:.2f} USDT")
                                action_futures.place_limit_short(symbol, limit_sell_price, botConfig.TRADE_AMOUNT)


                            elif "RSI_MACD" in chosen_strategies_futures["FUTURES"]:
                                logging.info(f"üìà RSI_MACD ‚Üí Ki·ªÉm tra xu h∆∞·ªõng {symbol}")

                                # L·∫•y d·ªØ li·ªáu k·ªπ thu·∫≠t t·ª´ `tech_data_spot`
                                

                                # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu RSI ho·∫∑c MACD kh√¥ng t·ªìn t·∫°i
                                if not rsi_data or not macd_data:
                                    logging.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu RSI ho·∫∑c MACD cho {symbol}, b·ªè qua giao d·ªãch!")
                                else:
                                    # L·∫•y gi√° tr·ªã RSI m·ªõi nh·∫•t
                                    rsi_value = rsi_data[-1]["rsi"] if rsi_data else None

                                    # L·∫•y gi√° tr·ªã MACD m·ªõi nh·∫•t
                                    macd_value = macd_data[-1]["macd"] if macd_data else None
                                    signal_value = macd_data[-1]["signal"] if macd_data else None

                                    trade_amount = botConfig.TRADE_AMOUNT
                                    leverage = botConfig.TRADE_LEVERAGE

                                    # **1Ô∏è‚É£ X√°c ƒë·ªãnh t√≠n hi·ªáu MUA (LONG)**
                                    if rsi_value is not None and macd_value is not None and signal_value is not None:
                                        if rsi_value < 30 and macd_value > signal_value:
                                            logging.info(f"üìä RSI = {rsi_value}, MACD c·∫Øt l√™n Signal ‚Üí ƒê·∫∑t l·ªánh LONG {symbol}")
                                            action_futures.place_limit_long(symbol, futures_price, trade_amount)

                                        # **2Ô∏è‚É£ X√°c ƒë·ªãnh t√≠n hi·ªáu B√ÅN (SHORT)**
                                        elif rsi_value > 70 and macd_value < signal_value:
                                            logging.info(f"üìä RSI = {rsi_value}, MACD c·∫Øt xu·ªëng Signal ‚Üí ƒê·∫∑t l·ªánh SHORT {symbol}")
                                            action_futures.place_limit_short(symbol, futures_price, trade_amount)

                                        else:
                                            logging.info(f"üìä RSI = {rsi_value}, MACD ch∆∞a c√≥ t√≠n hi·ªáu r√µ r√†ng, ch·ªù t√≠n hi·ªáu ti·∫øp theo.")


                            elif "ICHIMOKU" in chosen_strategies_futures["FUTURES"]:
                                logging.info(f"‚òÅÔ∏è ICHIMOKU ‚Üí Ph√¢n t√≠ch xu h∆∞·ªõng {symbol}")
                                action_futures.ichimoku_trading(symbol, botConfig.TRADE_AMOUNT, leverage)

                            elif "PIVOT_POINTS" in chosen_strategies_futures["FUTURES"]:
                                logging.info(f"üìç PIVOT POINTS ‚Üí Giao d·ªãch theo c√°c ƒëi·ªÉm pivot {symbol}")
                                action_futures.pivot_trading(symbol, botConfig.TRADE_AMOUNT, leverage)

                            elif "VWAP" in chosen_strategies_futures["FUTURES"]:
                                logging.info(f"üìä VWAP ‚Üí Giao d·ªãch theo kh·ªëi l∆∞·ª£ng trung b√¨nh {symbol}")
                                action_futures.vwap_trading(symbol, botConfig.TRADE_AMOUNT, leverage)

                            elif "VOLUME_PROFILE" in chosen_strategies_futures["FUTURES"]:
                                logging.info(f"üìä VOLUME PROFILE ‚Üí Ki·ªÉm tra kh·ªëi l∆∞·ª£ng giao d·ªãch {symbol}")
                                action_futures.volume_profile_trading(symbol, botConfig.TRADE_AMOUNT, leverage)

                            else:
                                logging.info("‚ö†Ô∏è Kh√¥ng c√≥ chi·∫øn l∆∞·ª£c giao d·ªãch Futures ph√π h·ª£p!")
                   

                # üî• **Ki·ªÉm tra TP/SL ƒë·ªÉ ƒë√≥ng l·ªánh n·∫øu ƒë·∫°t m·ª©c l·ª£i nhu·∫≠n ho·∫∑c l·ªó**
                logging.info("\nüîÑ Ki·ªÉm tra v·ªã th·∫ø m·ªü ƒë·ªÉ ƒë√≥ng n·∫øu ƒë·∫°t TP/SL...")
                open_positions = action_futures.get_open_positions(symbol)  # L·∫•y v·ªã th·∫ø m·ªü

                for pos in open_positions:
                    entry_price = float(pos["entryPrice"])
                    position_size = float(pos["positionAmt"])
                    current_price = float(futures_price)

                    take_profit_price = entry_price * (1 + botConfig.TAKE_PROFIT_PERCENT / 100)
                    stop_loss_price = entry_price * (1 - botConfig.STOP_LOSS_PERCENT / 100)

                    if position_size > 0:  # LONG
                        if current_price >= take_profit_price:
                            logging.info(f"‚úÖ TP ƒë·∫°t {take_profit_price:.2f} USDT ‚Üí ƒê√≥ng LONG {symbol}")
                            action_futures.close_long_position(symbol)
                        elif current_price <= stop_loss_price:
                            logging.warning(f"‚ùå SL ƒë·∫°t {stop_loss_price:.2f} USDT ‚Üí C·∫Øt l·ªó LONG {symbol}")
                            action_futures.close_long_position(symbol)

                    elif position_size < 0:  # SHORT
                        if current_price <= take_profit_price:
                            logging.info(f"‚úÖ TP ƒë·∫°t {take_profit_price:.2f} USDT ‚Üí ƒê√≥ng SHORT {symbol}")
                            action_futures.close_short_position(symbol)
                        elif current_price >= stop_loss_price:
                            logging.warning(f"‚ùå SL ƒë·∫°t {stop_loss_price:.2f} USDT ‚Üí C·∫Øt l·ªó SHORT {symbol}")
                            action_futures.close_short_position(symbol)


            # # üî• B∆∞·ªõc 7: Gi√°m s√°t & ƒêi·ªÅu ch·ªânh
            # logging.info("\nüîÑ Ki·ªÉm tra l·ªánh m·ªü & ƒëi·ªÅu ch·ªânh...")
            # action_spot.monitor_orders()
            # action_futures.monitor_orders()

            # üî• B∆∞·ªõc 8: Ghi log chi·∫øn l∆∞·ª£c ƒë√£ s·ª≠ d·ª•ng (Ch·ªâ ghi n·∫øu c√≥ chi·∫øn l∆∞·ª£c)
            if chosen_strategies.get("SPOT"):
                logger.save_strategy_history("SPOT", chosen_strategies["SPOT"], market_prices["spot"])
            if chosen_strategies.get("FUTURES"):
                logger.save_strategy_history("FUTURES", chosen_strategies["FUTURES"], market_prices["futures"])

        except Exception as e:
            logging.error(f"‚ùå L·ªói trong qu√° tr√¨nh ch·∫°y bot: {e}")

        logging.info("\n‚è≥ ƒê·ª£i tr∆∞·ªõc khi ch·∫°y v√≤ng ti·∫øp theo...\n")
        time.sleep(botConfig.API_REQUEST_INTERVAL)

if __name__ == "__main__":
    main()
