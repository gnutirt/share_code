import csv
import os
import logging
from datetime import datetime

# C·∫•u h√¨nh th∆∞ m·ª•c v√† file log
# T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a c√≥
os.makedirs("logs", exist_ok=True)

# C·∫•u h√¨nh logger ƒë·ªÉ l∆∞u log v√†o file
LOG_FILE = "./logs/bot_trading.log"
LOG_DIR = "logs"
 
TRADE_LOG_FILE = os.path.join(LOG_DIR, "trade_log.csv")
ERROR_LOG_FILE = os.path.join(LOG_DIR, "error_log.txt")

# ƒê·∫£m b·∫£o th∆∞ m·ª•c logs t·ªìn t·∫°i
os.makedirs(LOG_DIR, exist_ok=True)

# C·∫•u h√¨nh logging
# logging.basicConfig(
#     filename=os.path.join(LOG_DIR, "bot_runtime.log"),
#     level=logging.INFO,
#     format="%(asctime)s - %(levelname)s - %(message)s",
# )
 
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s", 
    handlers=[
        logging.FileHandler(LOG_FILE, mode='a', encoding="utf-8"),
        logging.StreamHandler()  # In log ra console
    ]
)
def log_trade(trade_type, symbol, price, quantity, strategy, status="SUCCESS"):
    """
    Ghi log giao d·ªãch v√†o CSV.
    
    :param trade_type: Lo·∫°i giao d·ªãch (BUY/SELL)
    :param symbol: C·∫∑p giao d·ªãch (VD: BTCUSDT)
    :param price: Gi√° th·ª±c hi·ªán giao d·ªãch
    :param quantity: Kh·ªëi l∆∞·ª£ng giao d·ªãch
    :param strategy: Chi·∫øn l∆∞·ª£c giao d·ªãch s·ª≠ d·ª•ng
    :param status: Tr·∫°ng th√°i giao d·ªãch (SUCCESS/FAILED)
    """
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = [timestamp, trade_type, symbol, price, quantity, strategy, status]

        file_exists = os.path.isfile(TRADE_LOG_FILE)

        with open(TRADE_LOG_FILE, mode="a", newline="") as file:
            writer = csv.writer(file)
            if not file_exists:
                writer.writerow(["Timestamp", "Trade Type", "Symbol", "Price", "Quantity", "Strategy", "Status"])
            writer.writerow(log_entry)

        logging.info(f"üìä Giao d·ªãch ƒë√£ ƒë∆∞·ª£c ghi log: {log_entry}")
    except Exception as e:
        log_error(f"L·ªói khi ghi log giao d·ªãch: {e}")

def log_error(error_message):
    """
    Ghi log l·ªói v√†o file error_log.txt.
    
    :param error_message: Th√¥ng b√°o l·ªói c·∫ßn ghi l·∫°i.
    """
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(ERROR_LOG_FILE, "a") as file:
            file.write(f"{timestamp} - ERROR: {error_message}\n")

        logging.error(f"‚ùå L·ªói ƒë√£ ƒë∆∞·ª£c ghi log: {error_message}")
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ghi log l·ªói: {e}")

def save_strategy_history(trade_mode, selected_strategies, market_data):
    """
    Ghi log chi·∫øn l∆∞·ª£c ƒë√£ s·ª≠ d·ª•ng v√†o CSV.

    :param trade_mode: SPOT ho·∫∑c FUTURES.
    :param selected_strategies: Danh s√°ch chi·∫øn l∆∞·ª£c ƒë√£ √°p d·ª•ng.
    :param market_data: D·ªØ li·ªáu th·ªã tr∆∞·ªùng (gi√° ƒë√≥ng c·ª≠a, RSI, MACD, ATR).
    """
    try:
        strategy_log_file = os.path.join(LOG_DIR, "strategy_history.csv")
        fieldnames = ["timestamp", "trade_mode", "strategies", "close_price", "RSI", "MACD", "ATR"]

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        data = {
            "timestamp": timestamp,
            "trade_mode": trade_mode,
            "strategies": ", ".join(selected_strategies) if selected_strategies else "NONE",
            "close_price": market_data.get("spot_price" if trade_mode == "SPOT" else "futures_price", None),
            "RSI": market_data.get("RSI", None),
            "MACD": market_data.get("MACD", None),
            "ATR": market_data.get("ATR", None),
        }

        file_exists = os.path.isfile(strategy_log_file)

        with open(strategy_log_file, "a", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            if not file_exists:
                writer.writeheader()
            writer.writerow(data)

        logging.info(f"üìä Chi·∫øn l∆∞·ª£c ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {strategy_log_file}: {data}")
    except Exception as e:
        log_error(f"L·ªói khi ghi log chi·∫øn l∆∞·ª£c: {e}")
import os
import csv
from datetime import datetime
import logging

def log_trade_closure(symbol, position_type, entry_price, close_price, close_type, unrealized_profit, profit_percent):
    """ 
    Ghi log l·ªánh ƒë√≥ng v√†o CSV v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin 
    N·∫øu `position_size` kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o, m·∫∑c ƒë·ªãnh l√† 1.0 ƒë·ªÉ tr√°nh l·ªói.
    """

    file_path = "./logs/liquidation_log.csv"
    file_exists = os.path.isfile(file_path)  # Ki·ªÉm tra xem file ƒë√£ t·ªìn t·∫°i ch∆∞a
    position_size=1.0
    # T√≠nh to√°n l·ª£i nhu·∫≠n ho·∫∑c l·ªó (PnL)
    profit_loss = (close_price - entry_price) * position_size if position_type == "LONG" else (entry_price - close_price) * position_size

    with open(file_path, mode='a', newline='') as file:
        writer = csv.writer(file)

        # N·∫øu file ch∆∞a t·ªìn t·∫°i, ghi ti√™u ƒë·ªÅ CSV
        if not file_exists:
            writer.writerow([
                "Timestamp", "Symbol", "Position Type", "Entry Price", "Close Price", 
                "Close Type", "PnL (USDT)", "Profit %", "Size"
            ])

        # Ghi d·ªØ li·ªáu l·ªánh ƒë√≥ng
        writer.writerow([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            symbol,
            position_type,
            round(entry_price, 4),
            round(close_price, 4),
            close_type,
            round(profit_loss, 4),
            round(profit_percent, 2),
            round(position_size, 6)
        ])
    
    logging.info(f"üìú Ghi log {close_type}: {symbol} {position_type} | Entry: {entry_price:.2f} ‚Üí Close: {close_price:.2f} | "
                 f"PnL: {profit_loss:.2f} USDT | Profit: {profit_percent:.2f}% | Size: {position_size:.6f}")
