import logging
import Binance_bot_trade.connection.connect_binance_spot as connect_binance_spot
import Binance_bot_trade.connection.connect_binance_future as connect_binance_future
import Binance_bot_trade.config.config as config

client_spot = connect_binance_spot.client_spot  # K·∫øt n·ªëi Spot
client_futures = connect_binance_future.client_futures  # K·∫øt n·ªëi Futures

# üî• L·∫•y gi√° Spot hi·ªán t·∫°i v√† tr·∫£ v·ªÅ gi√° tr·ªã
def get_spot_price(symbol=config.TRADE_PAIR_SPOT_BTCUSDT):
    try:
        ticker = client_spot.get_symbol_ticker(symbol=symbol)
        price = float(ticker["price"])
        return {"symbol": symbol, "spot_price": price}
    except Exception as e:
        return {"symbol": symbol, "spot_price": None, "error": str(e)}

# üî• L·∫•y gi√° Futures hi·ªán t·∫°i v√† tr·∫£ v·ªÅ gi√° tr·ªã
def get_futures_price(symbol=config.TRADE_PAIR_FUTURES_BTCUSDT):
    try:
        ticker = client_futures.futures_ticker(symbol=symbol)  # D√πng API l·∫•y c·∫£ previous_close
        price = float(ticker["lastPrice"])
        previous_close = float(ticker.get("prevClosePrice", price))  # N·∫øu kh√¥ng c√≥, l·∫•y ch√≠nh gi√° hi·ªán t·∫°i
        
        return {
            "symbol": symbol,
            "futures_price": price,
            "previous_close": previous_close
        }
    except Exception as e:
        return {
            "symbol": symbol,
            "futures_price": None,
            "previous_close": None,
            "error": str(e)
        }

# üî• H√†m c·∫≠p nh·∫≠t c·∫£ gi√° Spot v√† Futures
def update_prices():
    spot_info = get_spot_price()
    futures_info = get_futures_price()

    return {
        "spot": spot_info,
        "futures": futures_info
    }
def get_order_book(symbol, limit=10):
    """
    L·∫•y d·ªØ li·ªáu Order Book t·ª´ Binance Futures.
    
    :param symbol: C·∫∑p giao d·ªãch (VD: BTCUSDT)
    :param limit: S·ªë m·ª©c gi√° bid/ask mu·ªën l·∫•y
    :return: Dictionary ch·ª©a danh s√°ch bid v√† ask
    """
    try:
        order_book = client_futures.futures_order_book(symbol=symbol, limit=limit)
        return {
            "bids": order_book["bids"],  # Danh s√°ch gi√° ƒë·∫∑t mua
            "asks": order_book["asks"]   # Danh s√°ch gi√° ƒë·∫∑t b√°n
        }
    except Exception as e:
        logging.error(f"‚ùå L·ªói khi l·∫•y Order Book cho {symbol}: {e}")
        return None
def get_btc_24h_change():
    """L·∫•y ph·∫ßn trƒÉm thay ƒë·ªïi gi√° BTC trong 24 gi·ªù"""
    try:
        ticker_24h = client_futures.futures_ticker(symbol="BTCUSDT")
        price_change_percent = float(ticker_24h["priceChangePercent"])
        return price_change_percent
    except Exception as e:
        logging.error(f"‚ùå L·ªói khi l·∫•y bi·∫øn ƒë·ªông BTC 24h: {e}")
        return None
# Trong Binance_bot_trade/analysis/update_price.py
import requests

def get_funding_rate(symbol):
    """
    L·∫•y Funding Rate hi·ªán t·∫°i cho symbol t·ª´ Binance Futures API b·∫±ng HTTP GET.
    :param symbol: C·∫∑p giao d·ªãch (e.g., "BTCUSDT")
    :return: Funding Rate (float), ho·∫∑c None n·∫øu l·ªói ho·∫∑c symbol kh√¥ng t√¨m th·∫•y
    """
    url = "https://fapi.binance.com/fapi/v1/premiumIndex"
    try:
        response = requests.get(url)
        response.raise_for_status()  # Ki·ªÉm tra l·ªói HTTP
        data = response.json()  # Chuy·ªÉn ƒë·ªïi JSON th√†nh danh s√°ch Python
        
        # T√¨m symbol trong danh s√°ch
        for item in data:
            if item["symbol"] == symbol:
                funding_rate = float(item["lastFundingRate"])
                return funding_rate
        
        logging.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Funding Rate cho {symbol} trong d·ªØ li·ªáu API!")
        return None
        
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå L·ªói khi g·ªçi API Funding Rate: {e}")
        return None
    except ValueError as e:
        logging.error(f"‚ùå L·ªói khi ph√¢n t√≠ch JSON Funding Rate: {e}")
        return None
    except Exception as e:
        logging.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y Funding Rate cho {symbol}: {e}")
        return None
if __name__ == "__main__":
    symbol = config.TRADE_PAIR_FUTURES_BTCUSDT
    get_funding_rate = get_funding_rate(symbol)
    print(get_funding_rate)